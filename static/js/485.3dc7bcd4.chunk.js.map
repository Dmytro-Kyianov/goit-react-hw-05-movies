{"version":3,"file":"static/js/485.3dc7bcd4.chunk.js","mappings":"gOAEaA,EAAYC,EAAAA,EAAAA,IAAH,wRAaTC,EAAaD,EAAAA,EAAAA,EAAH,qI,SCoBvB,EA7BmB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACE,SAACL,EAAD,UACGG,EAAOG,KAAI,YAAmC,IAAhCC,EAA+B,EAA/BA,GAAIC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cACxB,OACE,SAAC,KAAD,CAAeC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAAnD,UACE,2BACE,SAACF,EAAD,UAAaM,IAEZC,GACC,gBACEI,IAAG,yCAAoCJ,GACvCK,IAAI,kBAGN,SAAC,MAAD,CAAgBC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,WAVxCV,EAed,OAIR,C,mMC/BKW,EAAU,mCAEVC,EAAS,sCAEFC,EAAqB,mCAAG,oGACVC,EAAAA,EAAAA,IAAA,UAJN,4DAIM,OAA4BH,IADlB,cAC7BI,EAD6B,yBAG5BA,EAAWC,KAAKC,SAHY,2CAAH,qDAMrBC,EAAQ,mCAAG,WAAMC,GAAN,uFACGL,EAAAA,EAAAA,IAAA,UACpBF,GADoB,OACRO,EADQ,oBACWR,IAFd,cAChBI,EADgB,yBAIfA,EAAWC,MAJI,2CAAH,sDAORI,EAAe,mCAAG,WAAMD,GAAN,uFACJL,EAAAA,EAAAA,IAAA,UACpBF,GADoB,OACRO,EADQ,4BACmBR,IAFf,cACvBI,EADuB,yBAItBA,EAAWC,MAJW,2CAAH,sDAOfK,EAAe,mCAAG,WAAMF,GAAN,uFACJL,EAAAA,EAAAA,IAAA,UACpBF,GADoB,OACRO,EADQ,4BACmBR,IAFf,cACvBI,EADuB,yBAItBA,EAAWC,KAAKC,SAJM,2CAAH,sDAOfK,EAAa,mCAAG,WAAMC,GAAN,uFACFT,EAAAA,EAAAA,IAAA,0DAC4BS,EAD5B,oBAC6CZ,IAF3C,cACrBI,EADqB,yBAIpBA,EAAWC,KAAKC,SAJI,2CAAH,qD,8KC/BbO,EAAQ9B,EAAAA,EAAAA,GAAH,uE,GAKGA,EAAAA,EAAAA,EAAH,mE,QC+BlB,EA9Ba,WACX,OAA4B+B,EAAAA,EAAAA,UAAS,IAArC,eAAO7B,EAAP,KAAe8B,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBF,GAAa,GADG,mBAGMjB,EAAAA,EAAAA,MAHN,OAGRoB,EAHQ,OAIdP,EAAUO,GAJI,gDAMdL,EAAS,EAAD,IANM,yBAQdE,GAAa,GARC,4EAAH,qDAWfE,GACD,GAAE,KAGD,iCACE,SAACR,EAAD,UAAO,mBACN5B,EAAOsC,OAAS,IAAK,SAACC,EAAA,EAAD,CAAYvC,OAAQA,IACzCiC,IAAa,SAAC,IAAD,IACbF,IAAS,uBAAG,iCAGlB,C","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","fetchFilmsUtils/fetchFilmData.js","pages/Home/Home.styled.jsx","pages/Home/Home.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 20px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const MovieTitle = styled.p`\n  margin-bottom: 8px;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  color: black;\n`;\n\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { BsPersonSquare } from 'react-icons/bs';\n\nimport { Container, MovieTitle } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <div>\n      <Container>\n        {movies.map(({ id, title, backdrop_path }) => {\n          return (\n            <Link key={id} to={`/movies/${id}`} state={{ from: location }}>\n              <li>\n                <MovieTitle>{title}</MovieTitle>\n\n                {backdrop_path ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w400${backdrop_path}`}\n                    alt=\"Movie poster\"\n                  />\n                ) : (\n                  <BsPersonSquare style={{ height: 200, width: 400 }} />\n                )}\n              </li>\n            </Link>\n          );\n        })}\n      </Container>\n    </div>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import axios from 'axios';\n\nconst API_KEY = '5675bc182c60433b4b08b7a83c9f5110';\nconst URL_TRENDING = 'https://api.themoviedb.org/3/trending/movie/day?api_key=';\nconst URL_MOVIE = `https://api.themoviedb.org/3/movie/`;\n\nexport const getMoviesListTrending = async () => {\n  const resultData = await axios.get(`${URL_TRENDING}${API_KEY}`);\n\n  return resultData.data.results;\n};\n\nexport const getMovie = async movieId => {\n  const resultData = await axios.get(\n    `${URL_MOVIE}${movieId}?api_key=${API_KEY}`\n  );\n  return resultData.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const resultData = await axios.get(\n    `${URL_MOVIE}${movieId}/credits?api_key=${API_KEY}`\n  );\n  return resultData.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const resultData = await axios.get(\n    `${URL_MOVIE}${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return resultData.data.results;\n};\n\nexport const getMoviesList = async query => {\n  const resultData = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${API_KEY}`\n  );\n  return resultData.data.results;\n};\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const Error = styled.p`\n  text-align: center;\n  font-size: 25px;\n`;\n\n\n","import { useState, useEffect } from 'react';\nimport { getMoviesListTrending } from 'fetchFilmsUtils/fetchFilmData';\n\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { Spinner } from 'components/Loader/Loader';\n\nimport { Title } from './Home.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getMovies = async () => {\n      setIsLoading(true);\n      try {\n        const fetch = await getMoviesListTrending();\n        setMovies(fetch);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovies();\n  }, []);\n\n  return (\n    <>\n      <Title>Trending today</Title>\n      {movies.length > 0 && <MoviesList movies={movies} />}\n      {isLoading && <Spinner />}\n      {error && <p>Some server error occurred</p>}\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["Container","styled","MovieTitle","movies","location","useLocation","map","id","title","backdrop_path","to","state","from","src","alt","style","height","width","API_KEY","URL_MOVIE","getMoviesListTrending","axios","resultData","data","results","getMovie","movieId","getMovieCredits","getMovieReviews","getMoviesList","query","Title","useState","setMovies","error","setError","isLoading","setIsLoading","useEffect","getMovies","fetch","length","MoviesList"],"sourceRoot":""}
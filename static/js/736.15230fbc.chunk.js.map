{"version":3,"file":"static/js/736.15230fbc.chunk.js","mappings":"wSAEaA,EAAYC,EAAAA,EAAAA,IAAH,wRAaTC,EAAOD,EAAAA,EAAAA,EAAH,iE,SC2CjB,EAjDa,WACX,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEOC,EAAAA,EAAAA,IAAgBJ,GAFvB,OAEbK,EAFa,OAGnBR,EAAWQ,GAHQ,gDAKnBN,EAAS,EAAD,IALW,yDAAH,qDAQpBI,GACD,GAAE,CAACH,IAEJ,IAAQM,EAASV,EAATU,KAER,OACE,iCACE,0BACE,SAACd,EAAD,UACGc,GACCA,EAAKC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,aAC/B,OACE,2BACE,yBACGA,GACC,gBACEC,IAAG,yCAAoCD,GACvCE,IAAG,OAAEL,QAAF,IAAEA,EAAAA,EAAQ,qBAGf,SAAC,MAAD,CAAgBM,MAAO,CAAEC,OAAQ,IAAKC,MAAO,UAIjD,SAACtB,EAAD,iBAAOc,QAAP,IAAOA,EAAAA,EAAQ,MACf,UAACd,EAAD,WAAM,cAAN,OAAkBe,QAAlB,IAAkBA,EAAAA,EAAa,QAbjC,OAASC,QAAT,IAASA,EAAAA,GAAMO,EAAAA,EAAAA,MAgBlB,QAGNnB,IAAS,uBAAG,yBAGlB,C,mMCvDKoB,EAAU,mCAEVC,EAAS,sCAEFC,EAAqB,mCAAG,oGACVC,EAAAA,EAAAA,IAAA,UAJN,4DAIM,OAA4BH,IADlB,cAC7BI,EAD6B,yBAG5BA,EAAWC,KAAKC,SAHY,2CAAH,qDAMrBC,EAAQ,mCAAG,WAAMzB,GAAN,uFACGqB,EAAAA,EAAAA,IAAA,UACpBF,GADoB,OACRnB,EADQ,oBACWkB,IAFd,cAChBI,EADgB,yBAIfA,EAAWC,MAJI,2CAAH,sDAORnB,EAAe,mCAAG,WAAMJ,GAAN,uFACJqB,EAAAA,EAAAA,IAAA,UACpBF,GADoB,OACRnB,EADQ,4BACmBkB,IAFf,cACvBI,EADuB,yBAItBA,EAAWC,MAJW,2CAAH,sDAOfG,EAAe,mCAAG,WAAM1B,GAAN,uFACJqB,EAAAA,EAAAA,IAAA,UACpBF,GADoB,OACRnB,EADQ,4BACmBkB,IAFf,cACvBI,EADuB,yBAItBA,EAAWC,KAAKC,SAJM,2CAAH,sDAOfG,EAAa,mCAAG,WAAMC,GAAN,uFACFP,EAAAA,EAAAA,IAAA,0DAC4BO,EAD5B,oBAC6CV,IAF3C,cACrBI,EADqB,yBAIpBA,EAAWC,KAAKC,SAJI,2CAAH,qD,wDChCnB,IAkBIP,EAAS,eAACY,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACvB,EAAIwB,GAWvD,OARExB,IAFFwB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","fetchFilmsUtils/fetchFilmData.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 20px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Text = styled.p`\n  margin-top: 10px;\n  font-size: 16px;\n`;\n","import { nanoid } from 'nanoid';\n\nimport { BsPersonSquare } from 'react-icons/bs';\nimport { useState, useEffect } from 'react';\nimport { getMovieCredits } from '../../fetchFilmsUtils/fetchFilmData';\nimport { useParams } from 'react-router-dom';\n\nimport { Container, Text } from './Cast.styled';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCreditsData = async () => {\n      try {\n        const creditsData = await getMovieCredits(movieId);\n        setCredits(creditsData);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    getCreditsData();\n  }, [movieId]);\n\n  const { cast } = credits;\n\n  return (\n    <>\n      <div>\n        <Container>\n          {cast &&\n            cast.map(({ name, character, id, profile_path }) => {\n              return (\n                <li key={id ?? nanoid()}>\n                  <div>\n                    {profile_path ? (\n                      <img\n                        src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                        alt={name ?? 'character photo'}\n                      />\n                    ) : (\n                      <BsPersonSquare style={{ height: 300, width: 200 }} />\n                    )}\n                  </div>\n\n                  <Text>{name ?? ''}</Text>\n                  <Text>Character: {character ?? ''}</Text>\n                </li>\n              );\n            })}\n        </Container>\n      </div>\n      {error && <p>Some error occured</p>}\n    </>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '5675bc182c60433b4b08b7a83c9f5110';\nconst URL_TRENDING = 'https://api.themoviedb.org/3/trending/movie/day?api_key=';\nconst URL_MOVIE = `https://api.themoviedb.org/3/movie/`;\n\nexport const getMoviesListTrending = async () => {\n  const resultData = await axios.get(`${URL_TRENDING}${API_KEY}`);\n\n  return resultData.data.results;\n};\n\nexport const getMovie = async movieId => {\n  const resultData = await axios.get(\n    `${URL_MOVIE}${movieId}?api_key=${API_KEY}`\n  );\n  return resultData.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const resultData = await axios.get(\n    `${URL_MOVIE}${movieId}/credits?api_key=${API_KEY}`\n  );\n  return resultData.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const resultData = await axios.get(\n    `${URL_MOVIE}${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return resultData.data.results;\n};\n\nexport const getMoviesList = async query => {\n  const resultData = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${API_KEY}`\n  );\n  return resultData.data.results;\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Container","styled","Text","useState","credits","setCredits","error","setError","movieId","useParams","useEffect","getCreditsData","getMovieCredits","creditsData","cast","map","name","character","id","profile_path","src","alt","style","height","width","nanoid","API_KEY","URL_MOVIE","getMoviesListTrending","axios","resultData","data","results","getMovie","getMovieReviews","getMoviesList","query","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}